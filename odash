#!/usr/bin/env bash
# This script was generated by bashly 1.0.5 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
	printf "bash version 4 or higher is required\n" >&2
	exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
	echo "$version"
}

# :command.usage
odash_usage() {
	if [[ -n $long_usage ]]; then
		printf "odash - Odoo Cluster Admin Shell\n"
		echo

	else
		printf "odash - Odoo Cluster Admin Shell\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odash COMMAND\n"
	printf "  odash [COMMAND] --help | -h\n"
	printf "  odash --version | -v\n"
	echo
	# :command.usage_commands
	printf "%s\n" "Commands:"
	printf "  %s   install necessary requirements\n" "setup "
	printf "  %s   deploy ansible playbook onto guest or group\n" "play  "
	printf "  %s   deploy ansible role onto guest or group\n" "role  "
	printf "  %s   check the syntax of a playbook\n" "syntax"
	printf "  %s   ping the host or group (default all)\n" "ping  "
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo
		printf "  %s\n" "--version, -v"
		printf "    Show version number\n"
		echo

		# :command.usage_environment_variables
		printf "%s\n" "Environment Variables:"

		# :environment_variable.usage
		printf "  %s\n" "PLAYBOOK_DIR"
		printf "\n"
		printf "    Default: ./playbooks\n"
		echo

	fi
}

# :command.usage
odash_setup_usage() {
	if [[ -n $long_usage ]]; then
		printf "odash setup - install necessary requirements\n"
		echo

	else
		printf "odash setup - install necessary requirements\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odash setup\n"
	printf "  odash setup --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

	fi
}

# :command.usage
odash_play_usage() {
	if [[ -n $long_usage ]]; then
		printf "odash play - deploy ansible playbook onto guest or group\n"
		echo

	else
		printf "odash play - deploy ansible playbook onto guest or group\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odash play PLAYBOOK [TARGET]\n"
	printf "  odash play --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "PLAYBOOK"
		printf "    playbook to run\n"
		echo

		# :argument.usage
		printf "  %s\n" "TARGET"
		printf "    group or guest to target\n"
		echo

	fi
}

# :command.usage
odash_role_usage() {
	if [[ -n $long_usage ]]; then
		printf "odash role - deploy ansible role onto guest or group\n"
		echo

	else
		printf "odash role - deploy ansible role onto guest or group\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odash role ROLE [TARGET]\n"
	printf "  odash role --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "ROLE"
		printf "    role to run\n"
		echo

		# :argument.usage
		printf "  %s\n" "TARGET"
		printf "    group or guest to target\n"
		printf "    Default: localhost\n"
		echo

	fi
}

# :command.usage
odash_syntax_usage() {
	if [[ -n $long_usage ]]; then
		printf "odash syntax - check the syntax of a playbook\n"
		echo

	else
		printf "odash syntax - check the syntax of a playbook\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odash syntax PLAYBOOK\n"
	printf "  odash syntax --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "PLAYBOOK"
		printf "    playbook to check\n"
		echo

	fi
}

# :command.usage
odash_ping_usage() {
	if [[ -n $long_usage ]]; then
		printf "odash ping - ping the host or group (default all)\n"
		echo

	else
		printf "odash ping - ping the host or group (default all)\n"
		echo

	fi

	printf "%s\n" "Usage:"
	printf "  odash ping [TARGET]\n"
	printf "  odash ping --help | -h\n"
	echo

	# :command.long_usage
	if [[ -n $long_usage ]]; then
		printf "%s\n" "Options:"

		# :command.usage_fixed_flags
		printf "  %s\n" "--help, -h"
		printf "    Show this help\n"
		echo

		# :command.usage_args
		printf "%s\n" "Arguments:"

		# :argument.usage
		printf "  %s\n" "TARGET"
		printf "    group or guest to target\n"
		echo

	fi
}

# :command.normalize_input
normalize_input() {
	local arg flags

	while [[ $# -gt 0 ]]; do
		arg="$1"
		if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
			flags="${BASH_REMATCH[1]}"
			for ((i = 0; i < ${#flags}; i++)); do
				input+=("-${flags:i:1}")
			done
		else
			input+=("$arg")
		fi

		shift
	done
}
# :command.inspect_args
inspect_args() {
	if ((${#args[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
		echo args:
		for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
	else
		echo args: none
	fi

	if ((${#other_args[@]})); then
		echo
		echo other_args:
		echo "- \${other_args[*]} = ${other_args[*]}"
		for i in "${!other_args[@]}"; do
			echo "- \${other_args[$i]} = ${other_args[$i]}"
		done
	fi

	if ((${#deps[@]})); then
		readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
		echo
		echo deps:
		for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
	fi

}

# :command.command_functions
# :command.function
odash_setup_command() {
	# src/setup_command.sh
	sudo apt update -y
	sudo apt install -y python3-pip python3-venv direnv git
	pip install pipenv
	if grep -q "direnv hook bash" $HOME/.bashrc; then
		echo
	else
		echo 'eval "$(direnv hook bash)"' >> $HOME/.bashrc
	fi
	git clone https://github.com/ppreeper/opensetup $HOME/opensetup
	source $HOME/.bashrc

}

# :command.function
odash_play_command() {
	# src/play_command.sh
	[ "${args[target]}" = "localhost" ] && export BECOME="-K" || export BECOME=""
	echo ansible-playbook -b ${PLAYBOOK_DIR}/${args[playbook]}.yml $BECOME
	ansible-playbook -b ${PLAYBOOK_DIR}/${args[playbook]}.yml $BECOME
}

# :command.function
odash_role_command() {
	# src/role_command.sh
	[ "${args[playbook]}" = "localhost" ] && export BECOME="-K" || export BECOME=""
	echo ansible-playbook -l ${args[target]} -e role=${args[role]} -b ${PLAYBOOK_DIR}/apply_role.yml $BECOME
	ansible-playbook -l ${args[target]} -e role=${args[role]} -b ${PLAYBOOK_DIR}/apply_role.yml $BECOME
}

# :command.function
odash_syntax_command() {
	# src/syntax_command.sh
	ansible-playbook --syntax-check ${PLAYBOOK_DIR}/${args[playbook]}.yml
}

# :command.function
odash_ping_command() {
	# src/ping_command.sh
	if [ -z "${args[target]}" ]; then
		ansible all -m ping -v
	else
		ansible ${args[target]} -m ping -v
	fi
}

# :command.parse_requirements
parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--version | -v)
				version_command
				exit
				;;

			--help | -h)
				long_usage=yes
				odash_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.environment_variables_filter
	# :command.environment_variables_default
	export PLAYBOOK_DIR="${PLAYBOOK_DIR:-./playbooks}"

	# :command.command_filter
	action=${1:-}

	case $action in
		-*) ;;

		setup)
			action="setup"
			shift
			odash_setup_parse_requirements "$@"
			shift $#
			;;

		play)
			action="play"
			shift
			odash_play_parse_requirements "$@"
			shift $#
			;;

		role)
			action="role"
			shift
			odash_role_parse_requirements "$@"
			shift $#
			;;

		syntax)
			action="syntax"
			shift
			odash_syntax_parse_requirements "$@"
			shift $#
			;;

		ping)
			action="ping"
			shift
			odash_ping_parse_requirements "$@"
			shift $#
			;;

		# :command.command_fallback
		"")
			odash_usage >&2
			exit 1
			;;

		*)
			printf "invalid command: %s\n" "$action" >&2
			exit 1
			;;

	esac

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odash_setup_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odash_setup_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="setup"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				printf "invalid argument: %s\n" "$key" >&2
				exit 1

				;;

		esac
	done

}

# :command.parse_requirements
odash_play_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odash_play_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="play"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['playbook']+x} ]]; then

					args['playbook']=$1
					shift
				elif [[ -z ${args['target']+x} ]]; then

					args['target']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['playbook']+x} ]]; then
		printf "missing required argument: PLAYBOOK\nusage: odash play PLAYBOOK [TARGET]\n" >&2
		exit 1
	fi

}

# :command.parse_requirements
odash_role_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odash_role_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="role"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['role']+x} ]]; then

					args['role']=$1
					shift
				elif [[ -z ${args['target']+x} ]]; then

					args['target']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['role']+x} ]]; then
		printf "missing required argument: ROLE\nusage: odash role ROLE [TARGET]\n" >&2
		exit 1
	fi

	# :command.default_assignments
	[[ -n ${args['target']:-} ]] || args['target']="localhost"

}

# :command.parse_requirements
odash_syntax_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odash_syntax_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="syntax"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['playbook']+x} ]]; then

					args['playbook']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

	# :command.required_args_filter
	if [[ -z ${args['playbook']+x} ]]; then
		printf "missing required argument: PLAYBOOK\nusage: odash syntax PLAYBOOK\n" >&2
		exit 1
	fi

}

# :command.parse_requirements
odash_ping_parse_requirements() {
	# :command.fixed_flags_filter
	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
			--help | -h)
				long_usage=yes
				odash_ping_usage
				exit
				;;

			*)
				break
				;;

		esac
	done

	# :command.command_filter
	action="ping"

	# :command.parse_requirements_while
	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

			-?*)
				printf "invalid option: %s\n" "$key" >&2
				exit 1
				;;

			*)
				# :command.parse_requirements_case
				# :command.parse_requirements_case_simple
				if [[ -z ${args['target']+x} ]]; then

					args['target']=$1
					shift
				else
					printf "invalid argument: %s\n" "$key" >&2
					exit 1
				fi

				;;

		esac
	done

}

# :command.initialize
initialize() {
	version="0.1.0"
	long_usage=''
	set -e

	# :command.environment_variables_default
	export PLAYBOOK_DIR="${PLAYBOOK_DIR:-./playbooks}"

}

# :command.run
run() {
	declare -A args=()
	declare -A deps=()
	declare -a other_args=()
	declare -a input=()
	normalize_input "$@"
	parse_requirements "${input[@]}"

	case "$action" in
		"setup") odash_setup_command ;;
		"play") odash_play_command ;;
		"role") odash_role_command ;;
		"syntax") odash_syntax_command ;;
		"ping") odash_ping_command ;;
	esac
}

initialize
run "$@"
